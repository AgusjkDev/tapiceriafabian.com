---
const SERVICES = [
    {
        title: "Tapizados personalizados",
        description:
            "Retapizado completo con diseños, telas y materiales de primera calidad a tu elección.",
        svgIconPath:
            "M19 9V6a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2v3 M3 16a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-5a2 2 0 0 0-4 0v1.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V11a2 2 0 0 0-4 0z M5 18v2 M19 18v2",
    },
    {
        title: "Reparación y lavado",
        description:
            "Eliminamos manchas, reparamos daños y restauramos la apariencia, devolviéndoles su mejor estado.",
        svgIconPath:
            "M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z",
    },
    {
        title: "Estilos renovados",
        description:
            "Transformamos la apariencia ajustándonos a las tendencias, con un estilo moderno y sofisticado.",
        svgIconPath:
            "m9.06 11.9 8.07-8.06a2.85 2.85 0 1 1 4.03 4.03l-8.06 8.08 M7.07 14.94c-1.66 0-3 1.35-3 3.02 0 1.33-2.5 1.52-2 2.02 1.08 1.1 2.49 2.02 4 2.02 2.2 0 4-1.8 4-4.04a3.01 3.01 0 0 0-3-3.02z",
    },
] satisfies {
    title: string;
    description: string;
    svgIconPath: string;
}[];
---

<section
    class="flex flex-col items-center gap-y-8 px-4 py-32 lg:px-8 xl:gap-y-12 2xl:gap-y-16"
    data-scroll-timeline
>
    <header class="flex flex-col gap-y-4">
        <h3
            class="text-center text-2xl font-black md:text-3xl md:leading-tight xl:text-4xl"
        >
            Nuestros servicios
        </h3>
        <h4
            class="max-w-prose text-center text-lg font-medium text-secondary-foreground"
        >
            Soluciones integrales de tapicería adaptadas a tus necesidades
        </h4>
    </header>

    <div
        class="group grid max-w-md gap-8 lg:max-w-screen-xl lg:grid-cols-3 lg:gap-8 xl:gap-12 2xl:gap-16"
        data-services-container
    >
        {
            SERVICES.map(({ title, description, svgIconPath }) => (
                <div class="relative aspect-square overflow-hidden rounded-3xl bg-secondary p-px before:pointer-events-none before:absolute before:-left-40 before:-top-40 before:z-10 before:size-80 before:translate-x-[var(--mouse-x)] before:translate-y-[var(--mouse-y)] before:rounded-full before:bg-primary before:opacity-0 before:blur-[96px] before:transition-opacity before:duration-500 after:pointer-events-none after:absolute after:-left-48 after:-top-48 after:z-30 after:size-96 after:translate-x-[var(--mouse-x)] after:translate-y-[var(--mouse-y)] after:rounded-full after:bg-primary after:opacity-0 after:blur-[96px] after:transition-opacity after:duration-500 after:hover:opacity-10 before:group-hover:opacity-100">
                    <div class="relative z-20 h-full rounded-[inherit] bg-background p-6 pb-8">
                        <div
                            aria-hidden="true"
                            class="absolute bottom-0 left-1/2 -z-10 aspect-square w-1/2 -translate-x-1/2 translate-y-1/2"
                        >
                            <div class="translate-z-0 absolute inset-0 rounded-full bg-secondary blur-[96px]" />
                        </div>

                        <div class="flex h-full flex-col items-center justify-around">
                            <div class="relative grid w-full place-items-center">
                                <div
                                    aria-hidden="true"
                                    class="absolute -z-10 size-[40%] rounded-full bg-primary blur-3xl"
                                />

                                <div class="grid aspect-square w-1/2 place-items-center rounded-full border border-secondary-foreground/5 bg-secondary/20">
                                    <div class="grid aspect-square w-[72.5%] place-items-center rounded-full border border-secondary-foreground/10 bg-secondary/30">
                                        <div class="grid aspect-square w-[60%] place-items-center rounded-full border border-secondary-foreground/15 bg-secondary/40">
                                            <svg
                                                xmlns="http://www.w3.org/2000/svg"
                                                viewBox="0 0 24 24"
                                                stroke-linecap="round"
                                                stroke-linejoin="round"
                                                class="aspect-square w-1/3 fill-transparent stroke-secondary-foreground stroke-2"
                                            >
                                                <path d={svgIconPath} />
                                            </svg>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="flex flex-col gap-y-2 text-center">
                                <h5 class="text-xl font-bold">{title}</h5>

                                <p class="max-w-prose text-sm text-secondary-foreground">
                                    {description}
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            ))
        }
    </div>
</section>

<script>
    const CONTAINER_SELECTOR = "[data-services-container]";
    const container = document.querySelector<HTMLElement>(CONTAINER_SELECTOR);
    if (!container) {
        throw new Error(
            `Could not find container with selector \`${CONTAINER_SELECTOR}\`.`,
        );
    }

    let size = { w: container.offsetWidth, h: container.offsetHeight };
    const updateSize = () => {
        size = { w: container.offsetWidth, h: container.offsetHeight };
    };

    const cards = Array.from(container.children) as HTMLElement[];
    const updateMouse = ({ clientX, clientY }: MouseEvent) => {
        const containerRect = container.getBoundingClientRect();
        const x = clientX - containerRect.left;
        const y = clientY - containerRect.top;

        if (x > 0 && x < size.w && y > 0 && y < size.h) {
            cards.forEach(card => {
                const { left, top } = card.getBoundingClientRect();
                card.style.setProperty(
                    "--mouse-x",
                    `${(x - (left - containerRect.left)).toFixed(2)}px`,
                );
                card.style.setProperty(
                    "--mouse-y",
                    `${(y - (top - containerRect.top)).toFixed(2)}px`,
                );
            });
        }
    };

    window.addEventListener("resize", updateSize);
    container.addEventListener("mousemove", updateMouse);
</script>
