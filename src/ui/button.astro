---
import type { HTMLAttributes } from "astro/types";
import { cva, type VariantProps } from "class-variance-authority";
import { twMerge } from "tailwind-merge";

const buttonVariants = cva(
    "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-2 text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
    {
        variants: {
            variant: {
                primary: "bg-primary text-foreground hover:bg-primary/90",
                contrast:
                    "bg-foreground text-background hover:bg-foreground/80",
                "animate-border":
                    "relative animate-border rounded-full bg-background before:absolute before:left-1/2 before:top-1/2 before:-z-10 before:box-content before:size-full before:-translate-x-1/2 before:-translate-y-1/2 before:rounded-full before:p-px before:content-[''] before:[background-image:var(--border)] hover:text-foreground/80",
            },
        },
        defaultVariants: {
            variant: "primary",
        },
    },
);

interface Props<TAs extends "button" | "a">
    extends VariantProps<typeof buttonVariants> {
    as: TAs;
    props?: HTMLAttributes<TAs>;
}
const { as: As, variant, props } = Astro.props;
---

<As
    {...props}
    class={twMerge(buttonVariants({ variant, class: props?.class }))}
    {...variant === "animate-border" && {
        style: {
            ...props?.style,
            "--border":
                "conic-gradient(from var(--border-angle), transparent 16.67%, #ffffff25 33.33%, hsl(var(--primary)))",
        },
    }}
>
    <slot />
</As>
